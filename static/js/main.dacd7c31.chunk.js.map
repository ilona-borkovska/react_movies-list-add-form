{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","services/movie.ts","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","checkIsValidUrl","url","test","TextField","name","value","label","placeholder","required","onChange","useState","Math","random","toFixed","slice","id","touched","setTouched","hasUrlError","setHasUrlError","hasError","checkUrlValidation","newValue","isValidUrl","htmlFor","type","classNames","event","target","onBlur","initialState","NewMovie","onAdd","count","setCount","state","setState","isValidImgUrl","isValidImdbUrl","hasInvalidFields","onSubmit","preventDefault","currentCount","disabled","App","moviesFromServer","setMovies","newMovie","moviesList","ReactDOM","render","document","getElementById"],"mappings":"kSAQaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,sBAAKC,UAAU,OAAO,UAAQ,aAA9B,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,gBAAlB,SACE,qBACEC,IAAKF,EAAMG,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAb,SAA2BD,EAAMK,aAIrC,sBAAKJ,UAAU,UAAf,UACGD,EAAMM,YACP,uBACA,mBAAGC,KAAMP,EAAMQ,QAAf,0BA5BkC,ECE7BC,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACzC,qBAAKT,UAAU,SAAf,SACGS,EAAOC,KAAI,SAAAX,GAAK,OACf,cAAC,EAAD,CAEEA,MAAOA,GADFA,EAAMY,OAFE,KAFsB,E,uBCVpC,SAASC,EAAgBC,GAI9B,MAFgB,uKAEDC,KAAKD,EACrB,CCcM,IAAME,EAA6B,SAAC,GAOpC,IANLC,EAMI,EANJA,KACAC,EAKI,EALJA,MAKI,IAJJC,aAII,MAJIF,EAIJ,MAHJG,mBAGI,sBAHmBD,GAGnB,MAFJE,gBAEI,aADJC,gBACI,MADO,WAAQ,EACf,EACJ,EAAaC,oBAAS,2BAASN,EAAT,YAbfO,KAAKC,SACTC,QAAQ,IACRC,MAAM,GAWa,IAAfC,EAAP,oBAEA,EAA8BL,oBAAS,GAAvC,mBAAOM,EAAP,KAAgBC,EAAhB,KACA,EAAsCP,oBAAS,GAA/C,mBAAOQ,EAAP,KAAoBC,EAApB,KACMC,EAAWJ,GAAWR,IAAaH,EAEzC,SAASgB,EAAmBC,GAC1B,IAAMC,EAAavB,EAAgBsB,GAEnCH,GAAe,kBAAOI,CAAP,GAChB,CAkBD,OACE,sBAAKnC,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQoC,QAAST,EAAlC,SACGT,IAGH,qBAAKlB,UAAU,UAAf,SACE,uBACEqC,KAAK,OACLV,GAAIA,EACJ,0BAAkBX,GAClBhB,UAAWsC,IAAW,QAAS,CAC7B,YAAaN,IAEfb,YAAaA,EACbF,MAAOA,EACPI,SAxBkB,SAACkB,GACzBlB,EAASkB,EAAMC,OAAOvB,QAElBW,GAAqB,WAATZ,GAA8B,YAATA,GACnCiB,EAAmBM,EAAMC,OAAOvB,MAEnC,EAmBOwB,OAjCgB,WACT,WAATzB,GAA8B,YAATA,GACvBiB,EAAmBhB,GAGrBY,GAAW,EACZ,MA+BIG,GACC,mBAAGhC,UAAU,iBAAb,mBAAkCkB,EAAlC,kBAGDY,IAAgBE,GACf,mBAAGhC,UAAU,iBAAb,kCAIP,ECpEK0C,EAAsB,CAC1BtC,MAAO,GACPC,YAAa,GACbH,OAAQ,GACRK,QAAS,GACTI,OAAQ,IAGGgC,EAA4B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC1C,EAA0BtB,mBAAS,GAAnC,mBAAOuB,EAAP,KAAcC,EAAd,KACA,EAA0BxB,mBAAgBoB,GAA1C,mBAAOK,EAAP,KAAcC,EAAd,KACMC,EAAgBrC,EAAgBmC,EAAM7C,QACtCgD,EAAiBtC,EAAgBmC,EAAMxC,SAEvC4C,GAAoBJ,EAAM3C,QAC1B2C,EAAM7C,SACN6C,EAAMxC,UACNwC,EAAMpC,SACNsC,IACAC,EAmBN,OACE,uBACElD,UAAU,WAEVoD,SAjBiB,SAACb,GACpBA,EAAMc,iBAEFF,IAIJP,EAAMG,GAVNC,EAASN,GAaTI,GAAS,SAAAQ,GAAY,OAAIA,EAAe,CAAnB,IACtB,EAGC,UAKE,oBAAItD,UAAU,QAAd,yBAEA,cAAC,EAAD,CACEgB,KAAK,QACLE,MAAM,QACND,MAAO8B,EAAM3C,MACbiB,SAAU,SAACa,GAAD,OAAcc,EAAS,2BAC5BD,GAD2B,IAE9B3C,MAAO8B,IAFC,EAIVd,UAAQ,IAGV,cAAC,EAAD,CACEJ,KAAK,cACLE,MAAM,cACND,MAAO8B,EAAM1C,YACbgB,SAAU,SAACa,GAAD,OAAcc,EAAS,2BAC5BD,GAD2B,IAE9B1C,YAAa6B,IAFL,IAMZ,cAAC,EAAD,CACElB,KAAK,SACLE,MAAM,YACND,MAAO8B,EAAM7C,OACbmB,SAAU,SAACa,GAAD,OAAcc,EAAS,2BAC5BD,GAD2B,IAE9B7C,OAAQgC,IAFA,EAIVd,UAAQ,IAGV,cAAC,EAAD,CACEJ,KAAK,UACLE,MAAM,WACND,MAAO8B,EAAMxC,QACbc,SAAU,SAACa,GAAD,OAAcc,EAAS,2BAC5BD,GAD2B,IAE9BxC,QAAS2B,IAFD,EAIVd,UAAQ,IAGV,cAAC,EAAD,CACEJ,KAAK,SACLE,MAAM,UACND,MAAO8B,EAAMpC,OACbU,SAAU,SAACa,GAAD,OAAcc,EAAS,2BAC5BD,GAD2B,IAE9BpC,OAAQuB,IAFA,EAIVd,UAAQ,IAGV,qBAAKpB,UAAU,mBAAf,SACE,qBAAKA,UAAU,UAAf,SACE,wBACEqC,KAAK,SACL,UAAQ,gBACRrC,UAAU,iBACVuD,SAAUJ,EAJZ,uBA7DCN,EAyEV,E,OC3HYW,EAAM,WACjB,MAA4BlC,mBAAkBmC,GAA9C,mBAAOhD,EAAP,KAAeiD,EAAf,KAMA,OACE,sBAAK1D,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYS,OAAQA,MAEtB,qBAAKT,UAAU,UAAf,SACE,cAAC,EAAD,CAAU4C,MAAO,SAAC7C,GAAD,OAVR4D,EAUgC5D,OAT7C2D,GAAU,SAAAE,GAAU,4BAAQA,GAAR,CAAoBD,GAApB,IADR,IAACA,CAUQ,QAIxB,ECrBDE,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,Q","file":"static/js/main.dacd7c31.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","export function checkIsValidUrl(url: string) {\n  // eslint-disable-next-line\n  const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n  return pattern.test(url);\n}\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { checkIsValidUrl } from '../../services/movie';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setTouched] = useState(false);\n  const [hasUrlError, setHasUrlError] = useState(false);\n  const hasError = touched && required && !value;\n\n  function checkUrlValidation(newValue: string) {\n    const isValidUrl = checkIsValidUrl(newValue);\n\n    setHasUrlError(() => !isValidUrl);\n  }\n\n  const handleFieldBlur = () => {\n    if (name === 'imgUrl' || name === 'imdbUrl') {\n      checkUrlValidation(value);\n    }\n\n    setTouched(true);\n  };\n\n  const handleFieldChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(event.target.value);\n\n    if (touched && (name === 'imgUrl' || name === 'imdbUrl')) {\n      checkUrlValidation(event.target.value);\n    }\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={handleFieldChange}\n          onBlur={handleFieldBlur}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {hasUrlError && !hasError && (\n        <p className=\"help is-danger\">The URL is invalid</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\nimport { checkIsValidUrl } from '../../services/movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\ninterface State {\n  title: string;\n  description: string;\n  imgUrl: string;\n  imdbUrl: string;\n  imdbId: string;\n}\n\nconst initialState: State = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [state, setState] = useState<State>(initialState);\n  const isValidImgUrl = checkIsValidUrl(state.imgUrl);\n  const isValidImdbUrl = checkIsValidUrl(state.imdbUrl);\n\n  const hasInvalidFields = !state.title\n    || !state.imgUrl\n    || !state.imdbUrl\n    || !state.imdbId\n    || !isValidImgUrl\n    || !isValidImdbUrl;\n\n  const resetForm = () => {\n    setState(initialState);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (hasInvalidFields) {\n      return;\n    }\n\n    onAdd(state);\n\n    resetForm();\n    setCount(currentCount => currentCount + 1);\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={state.title}\n        onChange={(newValue) => setState({\n          ...state,\n          title: newValue,\n        })}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={state.description}\n        onChange={(newValue) => setState({\n          ...state,\n          description: newValue,\n        })}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={state.imgUrl}\n        onChange={(newValue) => setState({\n          ...state,\n          imgUrl: newValue,\n        })}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={state.imdbUrl}\n        onChange={(newValue) => setState({\n          ...state,\n          imdbUrl: newValue,\n        })}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={state.imdbId}\n        onChange={(newValue) => setState({\n          ...state,\n          imdbId: newValue,\n        })}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={hasInvalidFields}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\n\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>(moviesFromServer);\n\n  const onAdd = (newMovie: Movie) => {\n    setMovies(moviesList => [...moviesList, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={(movie: Movie) => onAdd(movie)} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}